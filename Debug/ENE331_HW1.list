
ENE331_HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000218c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002324  08002324  00003324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002334  08002334  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002334  08002334  00003334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800233c  0800233c  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800233c  0800233c  0000333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002340  08002340  00003340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002344  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000018  0800235c  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800235c  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089fd  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b2  00000000  00000000  0000ca45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0000e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000762  00000000  00000000  0000ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015102  00000000  00000000  0000f1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fde  00000000  00000000  000242ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e76  00000000  00000000  0002e2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  000b6184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800230c 	.word	0x0800230c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800230c 	.word	0x0800230c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <GPIOA_Config>:
	    0b100,  // State 2 → PA3 ON
	    0b111   // State 3 → All ON
};


void GPIOA_Config(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	// Enable GPIOA Clock (if not already done)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <GPIOA_Config+0x80>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050c:	4a1d      	ldr	r2, [pc, #116]	@ (8000584 <GPIOA_Config+0x80>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA1–PA3: Set as general-purpose output
	GPIOA->MODER &= ~((0x3 << (1 * 2)) | (0x3 << (2 * 2)) | (0x3 << (3 * 2)));
 8000514:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <GPIOA_Config+0x84>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a1b      	ldr	r2, [pc, #108]	@ (8000588 <GPIOA_Config+0x84>)
 800051a:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800051e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  ((0x1 << (1 * 2)) | (0x1 << (2 * 2)) | (0x1 << (3 * 2))); // '01' = output
 8000520:	4b19      	ldr	r3, [pc, #100]	@ (8000588 <GPIOA_Config+0x84>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a18      	ldr	r2, [pc, #96]	@ (8000588 <GPIOA_Config+0x84>)
 8000526:	f043 0354 	orr.w	r3, r3, #84	@ 0x54
 800052a:	6013      	str	r3, [r2, #0]

	// PA6
	GPIOA->MODER &= ~(0x3 << (6 * 2));  // Clear MODER6
 800052c:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <GPIOA_Config+0x84>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <GPIOA_Config+0x84>)
 8000532:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000536:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x2 << (6 * 2));  // '10'
 8000538:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <GPIOA_Config+0x84>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <GPIOA_Config+0x84>)
 800053e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000542:	6013      	str	r3, [r2, #0]

	// Set ให้ output type ให้เป็น push-pull สำหรับ PA1, PA2, PA3, PA6
	GPIOA->OTYPER &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 6));
 8000544:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <GPIOA_Config+0x84>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <GPIOA_Config+0x84>)
 800054a:	f023 034e 	bic.w	r3, r3, #78	@ 0x4e
 800054e:	6053      	str	r3, [r2, #4]

	// Set ให้ PA1, PA2, PA3, PA6 ให้ไม่มี pull-up หรือ pull-down
	GPIOA->PUPDR &= ~((0x3 << (1 * 2)) | (0x3 << (2 * 2)) | (0x3 << (3 * 2)) | (0x3 << (6 * 2)));
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <GPIOA_Config+0x84>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <GPIOA_Config+0x84>)
 8000556:	f423 5343 	bic.w	r3, r3, #12480	@ 0x30c0
 800055a:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 800055e:	60d3      	str	r3, [r2, #12]

	// PA6 bits 27:24
	GPIOA->AFR[0] &= ~(0xF << (6 * 4));
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <GPIOA_Config+0x84>)
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <GPIOA_Config+0x84>)
 8000566:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800056a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0x1 << (6 * 4));  // AF1
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <GPIOA_Config+0x84>)
 800056e:	6a1b      	ldr	r3, [r3, #32]
 8000570:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <GPIOA_Config+0x84>)
 8000572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000576:	6213      	str	r3, [r2, #32]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	40020000 	.word	0x40020000

0800058c <Read_PA0>:
unsigned char Read_PA0(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return (GPIOA->IDR & (1 << 0)) ? 1 : 0; // ถ้า PA0 = 1(กด) คืนค่า 1, ถ้า PA0 = 0 คืนค่า 0
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <Read_PA0+0x20>)
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40020000 	.word	0x40020000

080005b0 <GPIOB_Config>:

void GPIOB_Config(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= (1 << 1);
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <GPIOB_Config+0x64>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4a16      	ldr	r2, [pc, #88]	@ (8000614 <GPIOB_Config+0x64>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30

    // MODER10 = B10
    GPIOB->MODER &= ~(0x3 << 20);  // Clear bits สำหรับ 21:20
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <GPIOB_Config+0x68>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <GPIOB_Config+0x68>)
 80005c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80005ca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x2 << 20);  // Set bits 21:20 to 10
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <GPIOB_Config+0x68>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <GPIOB_Config+0x68>)
 80005d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d6:	6013      	str	r3, [r2, #0]

    // Set Alternate Function AF1 for TIM2_CH3 on PB10
    GPIOB->AFR[1] &= ~(0xF << 8);  // Clear bits สำหรับ PB10
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <GPIOB_Config+0x68>)
 80005da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <GPIOB_Config+0x68>)
 80005de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80005e2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (0x1 << 8);  // TIM2_CH3
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <GPIOB_Config+0x68>)
 80005e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <GPIOB_Config+0x68>)
 80005ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ee:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set push-pull and no pull-up/down
    GPIOB->OTYPER &= ~(1 << 10);    // Push-pull
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <GPIOB_Config+0x68>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <GPIOB_Config+0x68>)
 80005f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005fa:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR  &= ~(0x3 << 20);  // No pull
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <GPIOB_Config+0x68>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <GPIOB_Config+0x68>)
 8000602:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020400 	.word	0x40020400

0800061c <GPIO_Toggle_Config>:



void GPIO_Toggle_Config(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
    // Enable GPIOA Clock
    RCC -> AHB1ENR |= (0x01 << 0);  // Enable GPIOA clock
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <GPIO_Toggle_Config+0x58>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <GPIO_Toggle_Config+0x58>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA6 as output
    GPIOA -> MODER &= ~(0x03 << (6 * 2));  // Clear MODER6
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 8000632:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000636:	6013      	str	r3, [r2, #0]
    GPIOA -> MODER |= (0x01 << (6 * 2));   // Set PA6 as output ('01')
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 800063e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000642:	6013      	str	r3, [r2, #0]

    // Set output type
    GPIOA -> OTYPER &= ~(0x01 << 6);  // set PA6 เป็น push-pull
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 800064a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800064e:	6053      	str	r3, [r2, #4]

    // Set GPIO Speed (optional)
    GPIOA -> OSPEEDR &= ~(0x03 << (6 * 2));  // set PA6 เป็นความเร็วต่ำ (default)
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 8000656:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800065a:	6093      	str	r3, [r2, #8]

    // Disable pull-up/pull-down
    GPIOA -> PUPDR &= ~(0x03 << (6 * 2));   // ไม่มี pull-up หรือ pull-down สำหรับ PA6
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <GPIO_Toggle_Config+0x5c>)
 8000662:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020000 	.word	0x40020000

0800067c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d104      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x1c>
		count++;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000696:	6013      	str	r3, [r2, #0]
	}
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40000400 	.word	0x40000400
 80006a8:	2000003c 	.word	0x2000003c

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fa63 	bl	8000b7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f881 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f92b 	bl	8000914 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006be:	f000 f8db 	bl	8000878 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80006c2:	4835      	ldr	r0, [pc, #212]	@ (8000798 <main+0xec>)
 80006c4:	f001 fa14 	bl	8001af0 <HAL_TIM_Base_Start>
  GPIOA_Config();
 80006c8:	f7ff ff1c 	bl	8000504 <GPIOA_Config>
  GPIOB_Config();
 80006cc:	f7ff ff70 	bl	80005b0 <GPIOB_Config>
  GPIO_Toggle_Config();
 80006d0:	f7ff ffa4 	bl	800061c <GPIO_Toggle_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  // เริ่มลูปไม่สิ้นสุด (จะทำงานตลอดเวลา)
  {
      // 20 us base time from TIM2
      if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) == SET) {
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <main+0xec>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d109      	bne.n	80006f6 <main+0x4a>
          __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);  // รีเซ็ต Flag ของ Timer 3
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <main+0xec>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f06f 0201 	mvn.w	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
          count++;  // เพิ่มตัวแปร count ทุกๆ ครั้งที่ Timer 3 อัพเดต
 80006ec:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <main+0xf0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <main+0xf0>)
 80006f4:	6013      	str	r3, [r2, #0]
      }

      // ให้ PA6 กระพริบทุกๆ 2 ms
      if((count - lastTime01) >= Settime01) {  // ถ้าเวลาที่ผ่านไปตั้งแต่ครั้งสุดท้ายที่ PA6 กระพริบ มากกว่าหรือเท่ากับ 2 ms
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <main+0xf0>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <main+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <main+0xf8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d315      	bcc.n	8000734 <main+0x88>
          // Your program task
          GPIOA->ODR ^= (1 << 6);  // เปลี่ยนสถานะของ PA6 (ถ้าปกติเป็น 0 ให้เป็น 1 ถ้าเป็น 1 ให้เป็น 0)
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <main+0xfc>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <main+0xfc>)
 800070e:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000712:	6153      	str	r3, [r2, #20]
          for(uint32_t i=0; i<=60000; i++) {  // รอให้เวลา 2 ms ผ่านไป (โดยใช้ NOP เพื่อไม่ให้ CPU ไปทำอย่างอื่น)
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e003      	b.n	8000722 <main+0x76>
              __NOP();  // No Operation (ไม่มีการทำงานจริงๆ)
 800071a:	bf00      	nop
          for(uint32_t i=0; i<=60000; i++) {  // รอให้เวลา 2 ms ผ่านไป (โดยใช้ NOP เพื่อไม่ให้ CPU ไปทำอย่างอื่น)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000728:	4293      	cmp	r3, r2
 800072a:	d9f6      	bls.n	800071a <main+0x6e>
          }
          lastTime01 = count;  // อัพเดตเวลาใน lastTime01 ให้เป็นเวลาในตัวแปร count
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <main+0xf0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <main+0xf4>)
 8000732:	6013      	str	r3, [r2, #0]
      }

      // อ่านค่า PA0 และเปลี่ยน state ใน LUT
      if((count - lastTime02) >= Settime02) {  // ถ้าเวลาที่ผ่านไปตั้งแต่ครั้งสุดท้ายที่อ่านค่า PA0 มากกว่าหรือเท่ากับ 20 ms
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <main+0xf0>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <main+0x100>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <main+0x104>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3c6      	bcc.n	80006d4 <main+0x28>
          // Your program task
          if ((Read_PA0() == 0 )) {  // ถ้าค่าของ PA0 เป็น 0 (หมายถึงปุ่มถูกกด)
 8000746:	f7ff ff21 	bl	800058c <Read_PA0>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d11d      	bne.n	800078c <main+0xe0>
              // On falling edge (button press)
              GPIOA->ODR &= ~(0x0E);  // เคลียร์ค่าของ PA1, PA2, PA3 (ปิดไฟที่ LED ทั้งสามตัว)
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <main+0xfc>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <main+0xfc>)
 8000756:	f023 030e 	bic.w	r3, r3, #14
 800075a:	6153      	str	r3, [r2, #20]
              GPIOA->ODR |= (LUT[state] << 1);  // เปิดไฟที่ LED ตามค่าของ state จาก LUT (LUT เป็นตารางที่เก็บค่าของสถานะ LED ต่างๆ)
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <main+0xfc>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <main+0x108>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <main+0x10c>)
 8000768:	5c5b      	ldrb	r3, [r3, r1]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	490e      	ldr	r1, [pc, #56]	@ (80007a8 <main+0xfc>)
 800076e:	4313      	orrs	r3, r2
 8000770:	614b      	str	r3, [r1, #20]

              state += 1;  // เพิ่มสถานะของ state
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <main+0x108>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <main+0x108>)
 800077c:	701a      	strb	r2, [r3, #0]

              if (state == 4) {  // ถ้าสถานะมากกว่าหรือเท่ากับ 4 (ต้องการให้สถานะกลับไปที่ 0)
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <main+0x108>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d102      	bne.n	800078c <main+0xe0>
                  state = 0;  // รีเซ็ตสถานะไปที่ 0
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <main+0x108>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
              }
          }
          lastTime02 = count;  // อัพเดตเวลาใน lastTime02 ให้เป็นเวลาในตัวแปร count
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <main+0xf0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a06      	ldr	r2, [pc, #24]	@ (80007ac <main+0x100>)
 8000792:	6013      	str	r3, [r2, #0]
      if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) == SET) {
 8000794:	e79e      	b.n	80006d4 <main+0x28>
 8000796:	bf00      	nop
 8000798:	20000044 	.word	0x20000044
 800079c:	2000003c 	.word	0x2000003c
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000000 	.word	0x20000000
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000038 	.word	0x20000038
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000040 	.word	0x20000040
 80007b8:	20000008 	.word	0x20000008

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	@ 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	@ 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fd72 	bl	80022b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <SystemClock_Config+0xb4>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <SystemClock_Config+0xb4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <SystemClock_Config+0xb8>)
 8000806:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <SystemClock_Config+0xb8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fceb 	bl	8001208 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000838:	f000 f8ce 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f000 ff4e 	bl	80016f8 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000862:	f000 f8b9 	bl	80009d8 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	@ 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim3.Instance = TIM3;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_TIM2_Init+0x94>)
 8000896:	4a1e      	ldr	r2, [pc, #120]	@ (8000910 <MX_TIM2_Init+0x98>)
 8000898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1440-1;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_TIM2_Init+0x94>)
 800089c:	f240 529f 	movw	r2, #1439	@ 0x59f
 80008a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_TIM2_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_TIM2_Init+0x94>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ba:	4814      	ldr	r0, [pc, #80]	@ (800090c <MX_TIM2_Init+0x94>)
 80008bc:	f001 f8c8 	bl	8001a50 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f887 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_TIM2_Init+0x94>)
 80008d8:	f001 fa54 	bl	8001d84 <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f879 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_TIM2_Init+0x94>)
 80008f4:	f001 fc5c 	bl	80021b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80008fe:	f000 f86b 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000044 	.word	0x20000044
 8000910:	40000400 	.word	0x40000400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a20      	ldr	r2, [pc, #128]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_GPIO_Init+0xbc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	210e      	movs	r1, #14
 8000982:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000984:	f000 fc02 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2140      	movs	r1, #64	@ 0x40
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 800098e:	f000 fbfd 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000992:	2301      	movs	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 80009a6:	f000 fa6d 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80009aa:	234e      	movs	r3, #78	@ 0x4e
 80009ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 80009c2:	f000 fa5f 	bl	8000e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <HAL_TIM_Base_MspInit+0x48>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d115      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_TIM_Base_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	201d      	movs	r0, #29
 8000a68:	f000 f9d5 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a6c:	201d      	movs	r0, #29
 8000a6e:	f000 f9ee 	bl	8000e4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40000400 	.word	0x40000400
 8000a80:	40023800 	.word	0x40023800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <NMI_Handler+0x4>

08000a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ada:	f000 f8a1 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 fb6a 	bl	80011c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <TIM3_IRQHandler+0x10>)
 8000af6:	f001 f855 	bl	8001ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000044 	.word	0x20000044

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f001 fbb5 	bl	80022c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fda7 	bl	80006ac <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b6c:	08002344 	.word	0x08002344
  ldr r2, =_sbss
 8000b70:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b74:	20000090 	.word	0x20000090

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f92b 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff ff18 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f943 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90b 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000014 	.word	0x20000014
 8000c1c:	20000010 	.word	0x20000010

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000014 	.word	0x20000014
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000008c 	.word	0x2000008c

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e159      	b.n	8001154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8148 	bne.w	800114e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a2 	beq.w	800114e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b57      	ldr	r3, [pc, #348]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a56      	ldr	r2, [pc, #344]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b54      	ldr	r3, [pc, #336]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <HAL_GPIO_Init+0x2ec>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	@ (8001174 <HAL_GPIO_Init+0x2f0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x202>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	@ (8001178 <HAL_GPIO_Init+0x2f4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x1fe>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a47      	ldr	r2, [pc, #284]	@ (800117c <HAL_GPIO_Init+0x2f8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x1fa>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a46      	ldr	r2, [pc, #280]	@ (8001180 <HAL_GPIO_Init+0x2fc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x1f6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	@ (8001184 <HAL_GPIO_Init+0x300>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x1f2>
 8001072:	2304      	movs	r3, #4
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001076:	2307      	movs	r3, #7
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	@ (8001170 <HAL_GPIO_Init+0x2ec>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111e:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_GPIO_Init+0x304>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f aea2 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f806 	bl	80011f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e267      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001226:	4b88      	ldr	r3, [pc, #544]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b85      	ldr	r3, [pc, #532]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b82      	ldr	r3, [pc, #520]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b7e      	ldr	r3, [pc, #504]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e242      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b76      	ldr	r3, [pc, #472]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a75      	ldr	r2, [pc, #468]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6f      	ldr	r2, [pc, #444]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6c      	ldr	r2, [pc, #432]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b69      	ldr	r3, [pc, #420]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b66      	ldr	r3, [pc, #408]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a65      	ldr	r2, [pc, #404]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fcc2 	bl	8000c48 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fcbe 	bl	8000c48 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e207      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcae 	bl	8000c48 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcaa 	bl	8000c48 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	@ 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f3      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800131e:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c7      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4937      	ldr	r1, [pc, #220]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b34      	ldr	r3, [pc, #208]	@ (800144c <HAL_RCC_OscConfig+0x244>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fc63 	bl	8000c48 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fc5f 	bl	8000c48 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a8      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4925      	ldr	r1, [pc, #148]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_RCC_OscConfig+0x244>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc42 	bl	8000c48 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc3e 	bl	8000c48 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e187      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d036      	beq.n	8001460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_RCC_OscConfig+0x248>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fc22 	bl	8000c48 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fc1e 	bl	8000c48 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e167      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <HAL_RCC_OscConfig+0x240>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e01b      	b.n	8001460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_OscConfig+0x248>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fc0b 	bl	8000c48 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e00e      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fc07 	bl	8000c48 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d907      	bls.n	8001454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e150      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ea      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8097 	beq.w	800159c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b81      	ldr	r3, [pc, #516]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b7d      	ldr	r3, [pc, #500]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a7c      	ldr	r2, [pc, #496]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b7a      	ldr	r3, [pc, #488]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b77      	ldr	r3, [pc, #476]	@ (800167c <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b74      	ldr	r3, [pc, #464]	@ (800167c <HAL_RCC_OscConfig+0x474>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a73      	ldr	r2, [pc, #460]	@ (800167c <HAL_RCC_OscConfig+0x474>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbc7 	bl	8000c48 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fbc3 	bl	8000c48 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e10c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <HAL_RCC_OscConfig+0x474>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2ea>
 80014e4:	4b64      	ldr	r3, [pc, #400]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e8:	4a63      	ldr	r2, [pc, #396]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x30c>
 80014fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	@ 0x70
 8001506:	4b5c      	ldr	r3, [pc, #368]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150a:	4a5b      	ldr	r2, [pc, #364]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	@ 0x70
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 8001514:	4b58      	ldr	r3, [pc, #352]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a57      	ldr	r2, [pc, #348]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001520:	4b55      	ldr	r3, [pc, #340]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a54      	ldr	r2, [pc, #336]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb88 	bl	8000c48 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb84 	bl	8000c48 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0cb      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	4b49      	ldr	r3, [pc, #292]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ee      	beq.n	800153c <HAL_RCC_OscConfig+0x334>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb72 	bl	8000c48 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb6e 	bl	8000c48 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0b5      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	4a38      	ldr	r2, [pc, #224]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a1 	beq.w	80016e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a6:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d05c      	beq.n	800166c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d141      	bne.n	800163e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb42 	bl	8000c48 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb3e 	bl	8000c48 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e087      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	491b      	ldr	r1, [pc, #108]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x478>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb17 	bl	8000c48 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb13 	bl	8000c48 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x416>
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb00 	bl	8000c48 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fafc 	bl	8000c48 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e045      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
 800166a:	e03d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e038      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000
 8001680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d028      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d121      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d11a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa2e 	bl	8000c48 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa2a 	bl	8000c48 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	@ (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f98e 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	08002324 	.word	0x08002324
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000010 	.word	0x20000010

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c8:	b090      	sub	sp, #64	@ 0x40
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80a1 	bhi.w	8001a30 <HAL_RCC_GetSysClockFreq+0x16c>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e09b      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x184>)
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018fc:	e09b      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b53      	ldr	r3, [pc, #332]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001902:	e098      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b4f      	ldr	r3, [pc, #316]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d028      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	2200      	movs	r2, #0
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	627a      	str	r2, [r7, #36]	@ 0x24
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800192c:	2100      	movs	r1, #0
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8001930:	fb03 f201 	mul.w	r2, r3, r1
 8001934:	2300      	movs	r3, #0
 8001936:	fb00 f303 	mul.w	r3, r0, r3
 800193a:	4413      	add	r3, r2
 800193c:	4a43      	ldr	r2, [pc, #268]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x188>)
 800193e:	fba0 1202 	umull	r1, r2, r0, r2
 8001942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001944:	460a      	mov	r2, r1
 8001946:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800194a:	4413      	add	r3, r2
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001950:	2200      	movs	r2, #0
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	61fa      	str	r2, [r7, #28]
 8001956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800195a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800195e:	f7fe fc3b 	bl	80001d8 <__aeabi_uldivmod>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4613      	mov	r3, r2
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800196a:	e053      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	2200      	movs	r2, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	617a      	str	r2, [r7, #20]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800197e:	f04f 0b00 	mov.w	fp, #0
 8001982:	4652      	mov	r2, sl
 8001984:	465b      	mov	r3, fp
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	ebb2 080a 	subs.w	r8, r2, sl
 800199e:	eb63 090b 	sbc.w	r9, r3, fp
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019b6:	ebb2 0408 	subs.w	r4, r2, r8
 80019ba:	eb63 0509 	sbc.w	r5, r3, r9
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	00eb      	lsls	r3, r5, #3
 80019c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019cc:	00e2      	lsls	r2, r4, #3
 80019ce:	4614      	mov	r4, r2
 80019d0:	461d      	mov	r5, r3
 80019d2:	eb14 030a 	adds.w	r3, r4, sl
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	eb45 030b 	adc.w	r3, r5, fp
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ea:	4629      	mov	r1, r5
 80019ec:	028b      	lsls	r3, r1, #10
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f4:	4621      	mov	r1, r4
 80019f6:	028a      	lsls	r2, r1, #10
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	2200      	movs	r2, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	60fa      	str	r2, [r7, #12]
 8001a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a08:	f7fe fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3740      	adds	r7, #64	@ 0x40
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	017d7840 	.word	0x017d7840

08001a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e041      	b.n	8001ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe ffdc 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f000 fa68 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d001      	beq.n	8001b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e03c      	b.n	8001b82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <HAL_TIM_Base_Start+0xa0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_TIM_Base_Start+0x5c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b22:	d013      	beq.n	8001b4c <HAL_TIM_Base_Start+0x5c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_TIM_Base_Start+0xa4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_TIM_Base_Start+0x5c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <HAL_TIM_Base_Start+0xa8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_Base_Start+0x5c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_TIM_Base_Start+0xac>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_TIM_Base_Start+0x5c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <HAL_TIM_Base_Start+0xb0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d010      	beq.n	8001b80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40000c00 	.word	0x40000c00
 8001ba0:	40014000 	.word	0x40014000

08001ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d020      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0202 	mvn.w	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f999 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f98b 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f99c 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0204 	mvn.w	r2, #4
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f973 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f965 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f976 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d020      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01b      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0208 	mvn.w	r2, #8
 8001c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2204      	movs	r2, #4
 8001c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f94d 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f93f 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f950 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01b      	beq.n	8001cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0210 	mvn.w	r2, #16
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f927 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f919 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f92a 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0201 	mvn.w	r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fcb6 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fab6 	bl	80022a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8fb 	bl	8001f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0220 	mvn.w	r2, #32
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa88 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_TIM_ConfigClockSource+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0b4      	b.n	8001f0a <HAL_TIM_ConfigClockSource+0x186>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dd8:	d03e      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0xd4>
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dde:	f200 8087 	bhi.w	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001de6:	f000 8086 	beq.w	8001ef6 <HAL_TIM_ConfigClockSource+0x172>
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dee:	d87f      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df0:	2b70      	cmp	r3, #112	@ 0x70
 8001df2:	d01a      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0xa6>
 8001df4:	2b70      	cmp	r3, #112	@ 0x70
 8001df6:	d87b      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df8:	2b60      	cmp	r3, #96	@ 0x60
 8001dfa:	d050      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x11a>
 8001dfc:	2b60      	cmp	r3, #96	@ 0x60
 8001dfe:	d877      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e00:	2b50      	cmp	r3, #80	@ 0x50
 8001e02:	d03c      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0xfa>
 8001e04:	2b50      	cmp	r3, #80	@ 0x50
 8001e06:	d873      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e08:	2b40      	cmp	r3, #64	@ 0x40
 8001e0a:	d058      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x13a>
 8001e0c:	2b40      	cmp	r3, #64	@ 0x40
 8001e0e:	d86f      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e10:	2b30      	cmp	r3, #48	@ 0x30
 8001e12:	d064      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15a>
 8001e14:	2b30      	cmp	r3, #48	@ 0x30
 8001e16:	d86b      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d060      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15a>
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d867      	bhi.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d05c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15a>
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d05a      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x15a>
 8001e28:	e062      	b.n	8001ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e3a:	f000 f999 	bl	8002170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	609a      	str	r2, [r3, #8]
      break;
 8001e56:	e04f      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e68:	f000 f982 	bl	8002170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e7a:	609a      	str	r2, [r3, #8]
      break;
 8001e7c:	e03c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 f8f6 	bl	800207c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2150      	movs	r1, #80	@ 0x50
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f94f 	bl	800213a <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e02c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 f915 	bl	80020da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2160      	movs	r1, #96	@ 0x60
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f93f 	bl	800213a <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e01c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f000 f8d6 	bl	800207c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2140      	movs	r1, #64	@ 0x40
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f92f 	bl	800213a <TIM_ITRx_SetConfig>
      break;
 8001edc:	e00c      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f000 f926 	bl	800213a <TIM_ITRx_SetConfig>
      break;
 8001eee:	e003      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a37      	ldr	r2, [pc, #220]	@ (8002064 <TIM_Base_SetConfig+0x100>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a36      	ldr	r2, [pc, #216]	@ (8002068 <TIM_Base_SetConfig+0x104>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a35      	ldr	r2, [pc, #212]	@ (800206c <TIM_Base_SetConfig+0x108>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <TIM_Base_SetConfig+0x100>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	@ (8002068 <TIM_Base_SetConfig+0x104>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	@ (800206c <TIM_Base_SetConfig+0x108>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a25      	ldr	r2, [pc, #148]	@ (8002070 <TIM_Base_SetConfig+0x10c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <TIM_Base_SetConfig+0x110>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <TIM_Base_SetConfig+0x114>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f023 0201 	bic.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  }
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f023 0201 	bic.w	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f023 030a 	bic.w	r3, r3, #10
 80020b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	621a      	str	r2, [r3, #32]
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 0210 	bic.w	r2, r3, #16
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	031b      	lsls	r3, r3, #12
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	621a      	str	r2, [r3, #32]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	f043 0307 	orr.w	r3, r3, #7
 800215c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	609a      	str	r2, [r3, #8]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800218a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	021a      	lsls	r2, r3, #8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	431a      	orrs	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e050      	b.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d018      	beq.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002214:	d013      	beq.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a16      	ldr	r2, [pc, #88]	@ (8002280 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a15      	ldr	r2, [pc, #84]	@ (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4313      	orrs	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40014000 	.word	0x40014000

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <memset>:
 80022b4:	4402      	add	r2, r0
 80022b6:	4603      	mov	r3, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	f803 1b01 	strb.w	r1, [r3], #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <__libc_init_array>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4d0d      	ldr	r5, [pc, #52]	@ (80022fc <__libc_init_array+0x38>)
 80022c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002300 <__libc_init_array+0x3c>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	2600      	movs	r6, #0
 80022d0:	42a6      	cmp	r6, r4
 80022d2:	d109      	bne.n	80022e8 <__libc_init_array+0x24>
 80022d4:	4d0b      	ldr	r5, [pc, #44]	@ (8002304 <__libc_init_array+0x40>)
 80022d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002308 <__libc_init_array+0x44>)
 80022d8:	f000 f818 	bl	800230c <_init>
 80022dc:	1b64      	subs	r4, r4, r5
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	2600      	movs	r6, #0
 80022e2:	42a6      	cmp	r6, r4
 80022e4:	d105      	bne.n	80022f2 <__libc_init_array+0x2e>
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ec:	4798      	blx	r3
 80022ee:	3601      	adds	r6, #1
 80022f0:	e7ee      	b.n	80022d0 <__libc_init_array+0xc>
 80022f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f6:	4798      	blx	r3
 80022f8:	3601      	adds	r6, #1
 80022fa:	e7f2      	b.n	80022e2 <__libc_init_array+0x1e>
 80022fc:	0800233c 	.word	0x0800233c
 8002300:	0800233c 	.word	0x0800233c
 8002304:	0800233c 	.word	0x0800233c
 8002308:	08002340 	.word	0x08002340

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
